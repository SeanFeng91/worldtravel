{
  "version": 3,
  "sources": ["../../../node_modules/@orama/wc-components/dist/esm/src/services/SearchService.ts", "../../../node_modules/@orama/wc-components/dist/esm/src/services/WindowService.ts", "../../../node_modules/@orama/wc-components/dist/esm/src/components/orama-search-box/orama-search-box.scss?tag=orama-search-box&encapsulation=shadow", "../../../node_modules/@orama/wc-components/dist/esm/src/components/orama-search-box/orama-search-box.tsx"],
  "sourcesContent": ["import type { ClientSearchParams } from '@oramacloud/client'\nimport { OramaClientNotInitializedError } from '@/erros/OramaClientNotInitialized'\nimport { searchState } from '@/context/searchContext'\nimport { Switch, type OramaSwitchClient } from '@orama/switch'\nimport type {\n  OnSearchCompletedCallbackProps,\n  ResultMap,\n  ResultMapKeys,\n  ResultMapRenderFunction,\n  SearchResultBySection,\n  SearchResultWithScore,\n} from '@/types'\n\nconst LIMIT_RESULTS = 10\n\n// TODO: Orama Client should expose Result type\n// biome-ignore lint/suspicious/noExplicitAny: There is not way to type document as we only know what it is in runtime\ntype OramaHit = { id: string; score: number; document: any }\n\nexport class SearchService {\n  private abortController: AbortController\n  private oramaClient: Switch<OramaSwitchClient>\n\n  constructor(oramaClient: OramaSwitchClient) {\n    this.oramaClient = new Switch(oramaClient)\n    this.abortController = new AbortController()\n  }\n\n  search = async (\n    term: string,\n    selectedFacet?: string,\n    callbacks?: {\n      onSearchCompletedCallback?: (onSearchCompletedCallbackProps: OnSearchCompletedCallbackProps) => unknown\n      onSearchErrorCallback?: (error: Error) => unknown\n    },\n  ) => {\n    if (!this.oramaClient) {\n      throw new OramaClientNotInitializedError()\n    }\n\n    this.abortSearch()\n\n    if (!term) {\n      searchState.results = []\n      searchState.count = 0\n      searchState.facets = []\n      searchState.highlightedIndex = -1\n\n      return\n    }\n\n    searchState.loading = true\n\n    const latestAbortController = this.abortController\n    const { limit, offset, where, ...restSearchParams } = searchState.searchParams ?? {}\n\n    const clientSearchParams = {\n      ...restSearchParams,\n      term,\n      limit: limit || LIMIT_RESULTS,\n      ...(where ? { where } : {}),\n      ...(searchState.facetProperty && {\n        facets: {\n          [searchState.facetProperty]: {},\n        },\n        ...(selectedFacet &&\n          selectedFacet !== 'All' && {\n            where: {\n              [searchState.facetProperty]: {\n                eq: selectedFacet,\n              },\n              ...where,\n            },\n          }),\n      }),\n    } as ClientSearchParams\n\n    await this.oramaClient\n      .search(clientSearchParams, { abortController: this.abortController })\n      .then((results) => {\n        if (latestAbortController.signal.aborted) {\n          return\n        }\n\n        searchState.results = this.parserResults(results?.hits, searchState.resultMap)\n        searchState.count = results?.count || 0\n        searchState.facets = this.parseFacets(results?.facets, searchState.facetProperty)\n        searchState.highlightedIndex = -1\n\n        searchState.loading = false\n\n        callbacks?.onSearchCompletedCallback?.({\n          clientSearchParams,\n          result: {\n            results: searchState.results,\n            resultsCount: searchState.count,\n            facets: searchState.facets,\n          },\n        })\n      })\n      .catch((error) => {\n        searchState.loading = false\n\n        callbacks?.onSearchErrorCallback?.(error)\n      })\n  }\n\n  abortSearch(): void {\n    this.abortController.abort()\n    this.abortController = new AbortController()\n  }\n\n  // TODO\n  retry = () => {\n    throw new Error('Not implemented')\n  }\n\n  private parserResults = (hits: OramaHit[] | undefined, resultMap: ResultMap): SearchResultBySection[] => {\n    if (!hits) {\n      return []\n    }\n\n    const perSectionResults = [] as SearchResultBySection[]\n    const arraySectionMap: { [key: string]: number } = {}\n\n    for (const hit of hits) {\n      const searchResultWithScore = this.hitToSearchResultParser(hit, resultMap)\n      const sectionKey = typeof resultMap.section === 'function' ? resultMap.section(hit.document) : resultMap.section\n      const documentSectionValue = hit.document[sectionKey]\n\n      if (arraySectionMap[documentSectionValue] === undefined) {\n        perSectionResults.push({\n          section: documentSectionValue,\n          items: [searchResultWithScore],\n        })\n        arraySectionMap[documentSectionValue] = perSectionResults.length - 1\n      } else {\n        const sectionIndex = arraySectionMap[documentSectionValue]\n        perSectionResults[sectionIndex].items.push(searchResultWithScore)\n      }\n    }\n\n    return perSectionResults\n  }\n\n  private hitToSearchResultParser = (hit: OramaHit, resultMap: ResultMap): SearchResultWithScore => {\n    function getResultMapValue(resultMapKey: ResultMapKeys): string {\n      const resultMapFunctionOrString = resultMap[resultMapKey]\n\n      if (!resultMapFunctionOrString) {\n        return hit.document[resultMapKey]\n      }\n\n      if (typeof resultMapFunctionOrString === 'function') {\n        const resultMapFunction = resultMapFunctionOrString as ResultMapRenderFunction\n        return resultMapFunction(hit.document)\n      }\n\n      const resultMapString = resultMap[resultMapKey] as string\n      return hit.document[resultMapString]\n    }\n\n    return {\n      id: hit.id,\n      score: hit.score,\n      title: getResultMapValue('title'),\n      description: getResultMapValue('description'),\n      path: getResultMapValue('path'),\n    }\n  }\n\n  private parseFacets = (\n    rawFacets: Record<\n      string,\n      {\n        count: number\n        values: Record<string, number>\n      }\n    >,\n    facetProperty,\n  ): { name: string; count: number }[] => {\n    if (!facetProperty || !rawFacets || !rawFacets[facetProperty]?.values) {\n      return []\n    }\n\n    const facetPropertyObject = rawFacets[facetProperty]\n\n    const totalCount = Object.values(facetPropertyObject.values).reduce((acc, count) => acc + count, 0)\n    const allFacets = Object.keys(facetPropertyObject.values).map((key) => {\n      return {\n        name: key,\n        count: facetPropertyObject.values[key],\n      }\n    })\n\n    allFacets.unshift({ name: 'All', count: totalCount })\n    return allFacets\n  }\n}\n", "export class WindowService extends EventTarget {\n  private _width: number\n\n  constructor() {\n    super()\n    this._width = window.innerWidth\n    this.handleResize = this.handleResize.bind(this)\n    window.addEventListener('resize', this.handleResize)\n  }\n\n  private handleResize() {\n    this._width = window.innerWidth\n    this.dispatchEvent(new CustomEvent('widthChange', { detail: this._width }))\n  }\n\n  get width() {\n    return this._width\n  }\n}\n\nconst windowWidthListener = new WindowService()\n\nexport { windowWidthListener }\n", "@keyframes showIn {\n  0% {\n    opacity: 0;\n    transform: translateY(-25%);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.modal {\n  @media (--md-min) {\n    orama-input {\n      padding: 0;\n      margin: 0;\n      border-radius: 0;\n    }\n\n    input[type='search'] {\n      border-radius: var(--radius-m, $radius-m) var(--radius-m, $radius-m) 0 0;\n    }\n  }\n}\n\n.main {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  overflow: hidden;\n}\n\n.section-active {\n  display: flex;\n  overflow: hidden;\n}\n\n.section-inactive {\n  display: none;\n}\n", "import { Component, Prop, Watch, h, Listen, Element, State, Fragment, Event, type EventEmitter } from '@stencil/core'\nimport { searchState } from '@/context/searchContext'\nimport { chatContext } from '@/context/chatContext'\nimport { globalContext, globalStore } from '@/context/GlobalContext'\nimport { ChatService } from '@/services/ChatService'\nimport { SearchService } from '@/services/SearchService'\nimport { windowWidthListener } from '@/services/WindowService'\nimport { arrowKeysNavigation, generateRandomID, initOramaClient, validateCloudIndexConfig } from '@/utils/utils'\nimport type { AnyOrama, Orama, SearchParams } from '@orama/orama'\nimport type { HighlightOptions } from '@orama/highlight'\nimport type { OramaClient } from '@oramacloud/client'\nimport type {\n  ChatMarkdownLinkHref,\n  ChatMarkdownLinkTarget,\n  ChatMarkdownLinkTitle,\n  CloudIndexConfig,\n  ColorScheme,\n  OnAnswerGeneratedCallbackProps,\n  OnAnswerSourceClickCallbackProps,\n  OnChatMarkdownLinkClickedCallbackProps,\n  OnSearchCompletedCallbackProps,\n  OnSearchResultClickCallbackProps,\n  ResultMap,\n  SourcesMap,\n} from '@/types'\nimport type { TThemeOverrides } from '@/config/theme'\n\n// TODO: AI components should be lazyly loaded. In case of Disable AI flag, it should not be loaded at all\n// https://linear.app/oramasearch/issue/ORM-1824/ai-components-should-be-lazyly-loaded-in-case-of-disable-ai-flag-they\n\n@Component({\n  tag: 'orama-search-box',\n  styleUrl: 'orama-search-box.scss',\n  shadow: true,\n})\nexport class SearchBox {\n  @Element() htmlElement!: HTMLElement\n\n  @Prop() themeConfig?: Partial<TThemeOverrides>\n  @Prop() colorScheme?: ColorScheme = 'light'\n  @Prop() index?: CloudIndexConfig\n  @Prop() clientInstance?: OramaClient | AnyOrama\n  @Prop({ mutable: true }) open = false\n  @Prop() facetProperty?: string\n  @Prop() resultMap?: Partial<ResultMap> = {}\n  @Prop() sourceBaseUrl?: string\n  @Prop() linksTarget?: string\n  @Prop() linksRel?: string\n  @Prop() sourcesMap?: SourcesMap\n  @Prop() disableChat?: boolean = false\n  @Prop() layout?: 'modal' | 'embed' = 'modal'\n  @Prop() highlightTitle?: HighlightOptions | false = false\n  @Prop() highlightDescription?: HighlightOptions | false = false\n\n  // TODO: remove it in favor of dictionary\n  @Prop() placeholder?: string\n  @Prop() chatPlaceholder?: string\n  @Prop() searchPlaceholder?: string\n  @Prop() suggestions?: string[]\n  @Prop() searchParams?: SearchParams<Orama<AnyOrama | OramaClient>>\n  @Prop() chatMarkdownLinkTitle?: ChatMarkdownLinkTitle\n  @Prop() chatMarkdownLinkHref?: ChatMarkdownLinkHref\n  @Prop() chatMarkdownLinkTarget?: ChatMarkdownLinkTarget\n\n  @State() componentID = generateRandomID('search-box')\n  @State() systemScheme: Omit<ColorScheme, 'system'> = 'light'\n  @State() windowWidth: number\n\n  /**\n   * Fired when search successfully resolves\n   */\n  @Event({ bubbles: true, composed: true }) searchCompleted: EventEmitter<OnSearchCompletedCallbackProps>\n  /**\n   * Fired when user clicks on search result\n   */\n  @Event({ bubbles: true, composed: true, cancelable: true })\n  searchResultClick: EventEmitter<OnSearchResultClickCallbackProps>\n  /**\n   * Fired when answer generation is successfully completed\n   */\n  @Event({ bubbles: true, composed: true }) answerGenerated: EventEmitter<OnAnswerGeneratedCallbackProps>\n  /**\n   * Fired when user clicks on answer source\n   */\n  @Event({ bubbles: true, composed: true, cancelable: true })\n  answerSourceClick: EventEmitter<OnAnswerSourceClickCallbackProps>\n  /**\n   * Fired when user clicks on chat markdown link\n   */\n  @Event({ bubbles: true, composed: true, cancelable: true })\n  chatMarkdownLinkClicked: EventEmitter<OnChatMarkdownLinkClickedCallbackProps>\n\n  wrapperRef!: HTMLElement\n\n  schemaQuery: MediaQueryList\n\n  @Watch('index')\n  @Watch('clientInstance')\n  indexChanged() {\n    this.startServices()\n  }\n\n  @Watch('themeConfig')\n  @Watch('colorScheme')\n  watchHandler() {\n    this.updateTheme()\n  }\n\n  @Watch('open')\n  handleOpenPropChange(newValue: boolean) {\n    globalContext.open = newValue\n  }\n\n  @Watch('facetProperty')\n  handleFacetPropertyChange(newValue: string) {\n    searchState.facetProperty = newValue\n  }\n\n  @Watch('searchParams')\n  handleSearchParamsChange(newValue: SearchParams<Orama<AnyOrama | OramaClient>>) {\n    searchState.searchParams = newValue\n  }\n\n  @Listen('modalStatusChanged')\n  modalStatusChangedHandler(event: CustomEvent<{ open: boolean; id: HTMLElement }>) {\n    if (event.detail.id === this.wrapperRef) {\n      if (!event.detail.open) {\n        globalContext.open = false\n        this.open = false\n      }\n    }\n  }\n\n  @Listen('keydown', { target: 'document' })\n  handleKeyDown(ev: KeyboardEvent) {\n    if (\n      globalContext.currentTask === 'search' &&\n      ((this.layout === 'modal' && this.open) || this.layout === 'embed') &&\n      ['ArrowDown', 'ArrowUp'].includes(ev.key)\n    ) {\n      arrowKeysNavigation(this.wrapperRef, ev)\n    }\n  }\n\n  updateTheme() {\n    const scheme = this.colorScheme === 'system' ? this.systemScheme : this.colorScheme\n    const uiElement = this.htmlElement\n\n    if (uiElement && scheme) {\n      uiElement.classList.remove('theme-light', 'theme-dark')\n      uiElement.classList.add(`theme-${scheme}`)\n    }\n\n    this.updateCssVariables(scheme as ColorScheme)\n  }\n\n  updateCssVariables(scheme: ColorScheme) {\n    const config = this.themeConfig\n    const root = this.htmlElement as HTMLElement\n\n    if (root && config && scheme) {\n      if (config.colors?.[scheme]) {\n        for (const key of Object.keys(config.colors[scheme])) {\n          root.style.setProperty(`${key}`, config.colors[scheme][key])\n        }\n      }\n      if (config.typography) {\n        for (const key of Object.keys(config.typography)) {\n          root.style.setProperty(`${key}`, config.typography[key])\n        }\n      }\n    }\n  }\n\n  startServices() {\n    validateCloudIndexConfig(this.htmlElement, this.index, this.clientInstance)\n    const oramaClient = this.clientInstance ? this.clientInstance : initOramaClient(this.index)\n\n    searchState.searchService = new SearchService(oramaClient)\n    chatContext.chatService = new ChatService(oramaClient)\n  }\n\n  componentWillLoad() {\n    // TODO: We probable want to keep these props below whithin the respective service\n    // instance property. I seems to make sense to pass it as initialization prop.\n    // Same goes for any other Chat init prop. Lets talk about it as well, please.\n    searchState.facetProperty = this.facetProperty\n    searchState.resultMap = this.resultMap\n    searchState.searchParams = this.searchParams\n\n    this.htmlElement.id = this.componentID\n    this.startServices()\n  }\n\n  connectedCallback() {\n    this.windowWidth = windowWidthListener.width\n    globalContext.open = this.open\n\n    globalStore.onChange('open', () => {\n      this.open = globalContext.open\n\n      if (!globalContext.open) {\n        globalContext.currentTerm = ''\n\n        // TODO: We should be reseting the context, but we do not want to lose params definitions.\n        // We may want to handle params in a different way.\n        searchState.facets = []\n        searchState.count = 0\n        searchState.results = []\n        searchState.highlightedIndex = -1\n        searchState.loading = false\n        searchState.error = false\n\n        chatContext.interactions = []\n      }\n    })\n\n    this.htmlElement.id = this.componentID\n    this.schemaQuery = window.matchMedia('(prefers-color-scheme: dark)')\n    this.systemScheme = this.schemaQuery.matches ? 'dark' : 'light'\n    this.updateTheme()\n\n    this.schemaQuery.addEventListener('change', this.onPrefersColorSchemeChange)\n    windowWidthListener.addEventListener('widthChange', this.updateWindowWidth)\n  }\n\n  disconnectedCallback() {\n    windowWidthListener.removeEventListener('widthChange', this.updateWindowWidth)\n    this.schemaQuery?.removeEventListener('change', this.onPrefersColorSchemeChange)\n  }\n\n  getSearchBox() {\n    return (\n      <div\n        class={`${\n          this.windowWidth > 1024\n            ? 'section-active'\n            : globalContext.currentTask === 'search'\n              ? 'section-active'\n              : 'section-inactive'\n        }`}\n      >\n        <orama-search\n          placeholder={this?.searchPlaceholder || 'Search...'}\n          focusInput={globalContext.currentTask === 'search'}\n          sourceBaseUrl={this.sourceBaseUrl}\n          linksTarget={this.linksTarget}\n          linksRel={this.linksRel}\n          highlightTitle={this.highlightTitle}\n          highlightDescription={this.highlightDescription}\n          disableChat={this.disableChat}\n          suggestions={this.suggestions}\n        >\n          {this.windowWidth > 1024 && !this.disableChat && (\n            <orama-chat-button\n              slot=\"summary\"\n              focus-on-arrow-nav\n              active={!!globalContext.currentTerm}\n              label={`${globalContext.currentTerm ? `${globalContext.currentTerm} - ` : ''}Get a summary`}\n              onClick={this.onChatButtonClick}\n              onKeyPress={this.onChatButtonClick}\n            />\n          )}\n        </orama-search>\n      </div>\n    )\n  }\n\n  getChatBox() {\n    return (\n      <Fragment>\n        <orama-chat\n          class={`${globalContext.currentTask === 'chat' ? 'section-active' : 'section-inactive'}`}\n          defaultTerm={globalContext.currentTask === 'chat' ? globalContext.currentTerm : ''}\n          showClearChat={false}\n          focusInput={globalContext.currentTask === 'chat'}\n          placeholder={this?.chatPlaceholder || this.placeholder}\n          sourceBaseUrl={this.sourceBaseUrl}\n          linksTarget={this.linksTarget}\n          linksRel={this.linksRel}\n          sourcesMap={this.sourcesMap}\n          suggestions={this.suggestions}\n          chatMarkdownLinkTitle={this.chatMarkdownLinkTitle}\n          chatMarkdownLinkHref={this.chatMarkdownLinkHref}\n        />\n      </Fragment>\n    )\n  }\n\n  getInnerContent() {\n    return (\n      <Fragment>\n        {this.disableChat ? null : (\n          <orama-navigation-bar\n            handleClose={this.closeSearchbox}\n            showBackButton={this.layout !== 'embed'}\n            showChatActions={globalContext.currentTask === 'chat'}\n          />\n        )}\n        <div class=\"main\">\n          {this.getSearchBox()}\n          {this.windowWidth <= 1024 && this.getChatBox()}\n        </div>\n        <orama-footer colorScheme={this.colorScheme === 'system' ? this.systemScheme : this.colorScheme} />\n      </Fragment>\n    )\n  }\n\n  getOuterContent() {\n    return this.windowWidth > 1024 ? (\n      <orama-sliding-panel\n        open={globalContext.currentTask === 'chat'}\n        backdrop={this.layout === 'embed'}\n        closed={() => {\n          globalContext.currentTask = 'search'\n        }}\n      >\n        {this.getChatBox()}\n      </orama-sliding-panel>\n    ) : null\n  }\n\n  getModalLayout() {\n    return (\n      <Fragment>\n        <orama-modal\n          ref={(el) => (this.wrapperRef = el)}\n          open={globalContext.open}\n          class=\"modal\"\n          mainTitle=\"Start your search\"\n          closeOnEscape={globalContext.currentTask === 'search' || this.windowWidth <= 1024}\n        >\n          {this.getInnerContent()}\n        </orama-modal>\n        {this.getOuterContent()}\n      </Fragment>\n    )\n  }\n\n  getEmbedLayout() {\n    return (\n      <Fragment>\n        <orama-embed ref={(el) => (this.wrapperRef = el)}>{this.getInnerContent()}</orama-embed>\n        {this.getOuterContent()}\n      </Fragment>\n    )\n  }\n\n  render() {\n    if (this.layout === 'modal' && !globalContext.open) {\n      return null\n    }\n\n    if (!searchState.searchService) {\n      return <orama-text as=\"p\">Unable to initialize search service</orama-text>\n    }\n\n    if (!chatContext.chatService) {\n      return <orama-text as=\"p\">Unable to initialize chat service</orama-text>\n    }\n\n    return this.layout === 'modal' ? this.getModalLayout() : this.getEmbedLayout()\n  }\n\n  private closeSearchbox = () => {\n    globalContext.open = false\n    this.open = false\n  }\n\n  private onChatButtonClick = () => {\n    globalContext.currentTask = 'chat'\n  }\n\n  private onPrefersColorSchemeChange = (event) => {\n    this.systemScheme = event.matches ? 'dark' : 'light'\n    this.updateTheme()\n  }\n\n  private updateWindowWidth = (event: CustomEvent) => {\n    this.windowWidth = event.detail\n  }\n}\n"],
  "mappings": "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",
  "names": ["_a"]
}
