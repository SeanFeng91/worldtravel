{
  "version": 3,
  "sources": ["../../../node_modules/@orama/wc-components/dist/esm/src/components/internal/orama-text/orama-text.scss?tag=orama-text&encapsulation=scoped", "../../../node_modules/@orama/wc-components/dist/esm/src/components/internal/orama-text/orama-text.tsx"],
  "sourcesContent": [".p {\n  @include paragraph();\n}\n\n.p-secondary {\n  @include paragraph('secondary');\n}\n\n.p-tertiary {\n  @include paragraph('tertiary');\n}\n\n.span {\n  @include span();\n}\n\n.span-secondary {\n  @include span('secondary');\n}\n\n.span-tertiary {\n  @include span('tertiary');\n}\n\n.small {\n  @include small();\n}\n\n.small-secondary {\n  @include small('secondary');\n}\n\n.small-tertiary {\n  @include small('tertiary');\n}\n\n.text-bold {\n  font-weight: var(--font-weight-semibold, $font-weight-semibold);\n}\n\n.text-left {\n  text-align: left;\n}\n\n.text-right {\n  text-align: right;\n}\n\n.text-center {\n  text-align: center;\n}\n\n.text-inactive {\n  color: var(--text-color-inactive, text-color('inactive'));\n}", "import { Component, Prop, h, State, Element } from '@stencil/core'\nimport { getNonExplicitAttributes } from '@/utils/utils'\n\nexport interface TextProps {\n  /** it defines the HTML tag to be used */\n  as?: 'p' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'span' | 'small' | 'a'\n  /** it defines how it should look like */\n  styledAs?: 'p' | 'span' | 'small' | undefined\n  /** the optional class name */\n  class?: string\n  /** optionally change text alignment */\n  align?: 'left' | 'center' | 'right'\n  /** optionally change variant style - default is primary */\n  variant: 'primary' | 'secondary' | 'tertiary'\n  /** show as inactive */\n  inactive?: boolean\n}\n@Component({\n  tag: 'orama-text',\n  styleUrl: 'orama-text.scss',\n  scoped: true,\n})\n\n/**\n * The OramaText component is used to render a text element with a specific style.\n *\n */\nexport class OramaText implements TextProps {\n  @Element() el: HTMLElement\n\n  @Prop() as?: TextProps['as'] = 'p'\n  @Prop() styledAs?: TextProps['styledAs']\n  @Prop() bold?: boolean = false\n  @Prop() class?: string\n  @Prop() align?: TextProps['align']\n  @Prop() variant: TextProps['variant'] = 'primary'\n  @Prop() inactive?: TextProps['inactive']\n\n  @State() defaultStyle: string =\n    this.styledAs === 'span' || this.styledAs === 'small' || this.styledAs === 'p' ? this.styledAs : this.as\n\n  render() {\n    const Tag = this.as\n    const declaredProps = ['as', 'styled-as', 'class']\n    const textProps = getNonExplicitAttributes(this.el, declaredProps)\n\n    return (\n      <Tag\n        class={{\n          [this.defaultStyle]: true,\n          [`text-${this.align}`]: !!this.align,\n          [`${this.defaultStyle}-${this.variant}`]: true,\n          'text-inactive': !!this.inactive,\n          'text-bold': !!this.bold,\n          [this.class]: !!this.class,\n        }}\n        {...textProps}\n      >\n        <slot />\n      </Tag>\n    )\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;AAAA,IAAM,eAAe;AACrB,IAAA,kBAAe;IC0BF,YAAS,MAAA;;;cAGW;;gBAEN;;;mBAGe;;wBAItC,KAAK,aAAa,UAAU,KAAK,aAAa,WAAW,KAAK,aAAa,MAAM,KAAK,WAAW,KAAK;;EAExG,SAAM;AACJ,UAAM,MAAM,KAAK;AACjB,UAAM,gBAAgB,CAAC,MAAM,aAAa,OAAO;AACjD,UAAM,YAAY,yBAAyB,KAAK,IAAI,aAAa;AAEjE,WACE,EAAC,KAAG,OAAA,OAAA,EAAA,KAAA,4CACF,OAAO;MACL,CAAC,KAAK,YAAY,GAAG;MACrB,CAAC,QAAQ,KAAK,KAAK,EAAE,GAAG,CAAC,CAAC,KAAK;MAC/B,CAAC,GAAG,KAAK,YAAY,IAAI,KAAK,OAAO,EAAE,GAAG;MAC1C,iBAAiB,CAAC,CAAC,KAAK;MACxB,aAAa,CAAC,CAAC,KAAK;MACpB,CAAC,KAAK,KAAK,GAAG,CAAC,CAAC,KAAK;MACtB,GACG,SAAS,GAEb,EAAA,QAAA,EAAA,KAAA,2CAAA,CAAA,CAAQ;;;;;;;",
  "names": []
}
