{
  "version": 3,
  "sources": ["../../../node_modules/@orama/wc-components/dist/esm/src/components/internal/orama-button/orama-button.scss?tag=orama-button&encapsulation=scoped", "../../../node_modules/@orama/wc-components/dist/esm/src/components/internal/orama-button/orama-button.tsx"],
  "sourcesContent": ["// TODO: We need to revisit this styles. There are some duplications and variables without fallback\n.button {\n  position: relative;\n  display: flex;\n  gap: var(--spacing-s, $spacing-s);\n  align-items: center;\n  border-radius: var(--radius-m, $radius-m);\n  border: 0;\n  cursor: pointer;\n  font-family: var(--font-primary, font('primary'));\n  transition: all 0.2s;\n  transition-property: color, background-color, opacity;\n  width: 100%;\n  text-align: left;\n\n  &__tooltip {\n    display: block;\n    opacity: 0;\n    position: absolute;\n    background-color: var(--text-color-primary, text-color('primary'));\n    color: var(--background-color-primary, background-color('primary'));\n    padding: var(--spacing-s, $spacing-s);\n    border-radius: var(--radius-s, $radius-s);\n    font-size: 10px;\n    z-index: 1;\n    top: -28px;\n    animation: fadeInOut 1s ease-in-out 1;\n  }\n}\n\n.button--small {\n  padding: var(--spacing-xs, $spacing-xs);\n}\n\n.button--medium {\n  padding: var(--spacing-s, $spacing-s);\n}\n\n.button--large {\n  padding: var(--spacing-m, $spacing-m);\n}\n\n.button__label {\n  display: flex;\n  align-items: center;\n  gap: var(--spacing-xs, $spacing-xs);\n  flex-grow: 1;\n}\n\n.button--primary {\n  background-color: var(--button-background-color-primary, button-background-color('primary'));\n  color: var(--button-text-color-primary, button-text-color('primary'));\n\n  &:disabled {\n    background-color: var(--background-color-tertiary, background-color('tertiary'));\n    color: var(--text-color-tertiary);\n  }\n}\n\n.button--secondary {\n  background-color: var(--button-background-color-secondary, button-background-color('secondary'));\n  color: var(--button-text-color-secondary, button-text-color('secondary'));\n  border: 1px solid var(--button-border-color-secondary, map-get($palette, 'button-border', 'secondary'));\n  transition: all 0.3s;\n\n  @media (hover: hover) {\n    &:hover {\n      background-color: var(--button-background-color-secondary-hover, button-background-color('secondary-hover'));\n    }\n  }\n\n  &:focus-visible {\n    outline: none;\n    border: 1px solid #9671b0;\n  }\n\n  &:disabled {\n    background-color: var(--background-color-tertiary, background-color('tertiary'));\n    color: var(--text-color-tertiary);\n  }\n}\n\n.button--icon {\n  background-color: transparent;\n  color: var(--icon-color-tertiary, text-color('tertiary'));\n  padding: var(--spacing-s, $spacing-s);\n  width: fit-content;\n  height: fit-content;\n  justify-content: center;\n  align-items: center;\n  font-family: var(--font-primary, font('primary'));\n  border-radius: 50%;\n\n  &:disabled {\n    opacity: 0.6;\n    background-color: var(--background-color-tertiary, background-color('tertiary'));\n  }\n\n  &:hover {\n    background-color: var(--background-color-tertiary, background-color('tertiary'));\n  }\n}\n\n// slot elements should be aligned center\n::slotted(*) {\n  display: inline-flex;\n  align-items: center;\n}\n\n::slotted([slot='adorment-end']),\n::slotted([slot='adorment-start']) {\n  flex-grow: 0;\n}\n\n@keyframes fadeInOut {\n  0% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0;\n  }\n}\n", "import { Component, Prop, h, Element } from '@stencil/core'\nimport { getNonExplicitAttributes } from '@/utils/utils'\n\ntype BaseProps = {\n  /** the optional class name */\n  class?: string\n  /** the style variant of the button - default is primary */\n  variant?: 'primary' | 'secondary' | 'icon'\n}\n\ntype ConditionalProps =\n  | {\n      /** it defines the HTML tag to be used */\n      as?: 'button'\n      type: 'button' | 'submit' | 'reset'\n    }\n  | {\n      /** it defines the HTML tag to be used */\n      as?: 'a'\n      href: string\n      type?: never\n    }\n\nexport type ButtonProps = BaseProps & ConditionalProps\n\n@Component({\n  tag: 'orama-button',\n  styleUrl: 'orama-button.scss',\n  scoped: true,\n})\n\n/**\n * The orama-button component is used to render a button or anchor element looking like a button.\n */\nexport class OramaButton {\n  @Element() el: HTMLButtonElement | HTMLAnchorElement\n\n  @Prop() as?: ButtonProps['as'] = 'button'\n  @Prop() class?: string\n  @Prop() variant?: ButtonProps['variant'] = 'primary'\n  @Prop() size: 'small' | 'medium' | 'large' = 'medium'\n  @Prop() type?: ButtonProps['type']\n  @Prop() disabled?: boolean\n  @Prop() withTooltip?: string\n\n  render() {\n    const Tag = this.as\n    const declaredProps = ['as', 'class', 'variant']\n    const buttonProps = getNonExplicitAttributes(this.el, declaredProps)\n\n    const buttonClass = `button button--${this.variant} button--${this.size} ${this.class || ''}`\n\n    return (\n      <Tag class={buttonClass} {...buttonProps} disabled={this.disabled}>\n        <span class=\"button__label\">\n          <slot name=\"adorment-start\" />\n          {this.withTooltip && <span class=\"button__tooltip\">{this.withTooltip}</span>}\n          <slot />\n        </span>\n        <slot name=\"adorment-end\" />\n      </Tag>\n    )\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;AAAA,IAAM,iBAAiB;AACvB,IAAA,oBAAe;ICiCF,cAAW,MAAA;;;cAGW;;mBAEU;gBACE;;;;;EAK7C,SAAM;AACJ,UAAM,MAAM,KAAK;AACjB,UAAM,gBAAgB,CAAC,MAAM,SAAS,SAAS;AAC/C,UAAM,cAAc,yBAAyB,KAAK,IAAI,aAAa;AAEnE,UAAM,cAAc,kBAAkB,KAAK,OAAO,YAAY,KAAK,IAAI,IAAI,KAAK,SAAS,EAAE;AAE3F,WACE,EAAC,KAAG,OAAA,OAAA,EAAA,KAAA,4CAAC,OAAO,YAAW,GAAM,aAAW,EAAE,UAAU,KAAK,SAAQ,CAAA,GAC/D,EAAA,QAAA,EAAA,KAAA,4CAAM,OAAM,gBAAe,GACzB,EAAA,QAAA,EAAA,KAAA,4CAAM,MAAK,iBAAgB,CAAA,GAC1B,KAAK,eAAe,EAAA,QAAA,EAAA,KAAA,4CAAM,OAAM,kBAAiB,GAAE,KAAK,WAAW,GACpE,EAAA,QAAA,EAAA,KAAA,2CAAA,CAAA,CAAQ,GAEV,EAAA,QAAA,EAAA,KAAA,4CAAM,MAAK,eAAc,CAAA,CAAG;;;;;;;",
  "names": []
}
