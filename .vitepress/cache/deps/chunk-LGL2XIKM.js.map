{
  "version": 3,
  "sources": ["../../../node_modules/@orama/wc-components/dist/esm/src/erros/OramaClientNotInitialized.ts", "../../../node_modules/@orama/wc-components/dist/esm/src/services/ChatService.ts"],
  "sourcesContent": ["export class OramaClientNotInitializedError extends Error {\n  constructor() {\n    super('Orama Client is not initialized')\n  }\n}\n", "import type { AskParams } from '@oramacloud/client'\nimport type { AnswerSession as OSSAnswerSession } from '@orama/orama'\nimport type { AnswerSession as CloudAnswerSession } from '@oramacloud/client'\nimport type { OramaSwitchClient } from '@orama/switch'\nimport { Switch } from '@orama/switch'\nimport { OramaClientNotInitializedError } from '@/erros/OramaClientNotInitialized'\nimport { chatContext, TAnswerStatus } from '@/context/chatContext'\nimport type { OnAnswerGeneratedCallbackProps } from '@/types'\n\nexport class ChatService {\n  oramaClient: Switch\n  answerSession: CloudAnswerSession<true> | OSSAnswerSession\n\n  constructor(oramaClient: OramaSwitchClient) {\n    this.oramaClient = new Switch(oramaClient)\n  }\n\n  sendQuestion = (\n    term: string,\n    systemPrompts?: string[],\n    callbacks?: {\n      onAnswerGeneratedCallback?: (onAnswerGeneratedCallback: OnAnswerGeneratedCallbackProps) => unknown\n    },\n  ) => {\n    if (!this.oramaClient) {\n      throw new OramaClientNotInitializedError()\n    }\n\n    const askParams: AskParams = { term: term, related: { howMany: 3, format: 'question' } }\n\n    if (!this.answerSession) {\n      this.answerSession = this.oramaClient.createAnswerSession({\n        events: {\n          onStateChange: (state) => {\n            // TODO: Remove: this is a quick and dirty fix for odd behavior of the SDK. When we abort, it generates a new interaction with empty query and empty anwer.\n            const normalizedState = state.filter((stateItem) => !!stateItem.query)\n            // if (normalizedState[normalizedState.length - 1].aborted) {\n            //   chatContext.interactions = chatContext.interactions.map((interaction, index) => {\n            //     if (index === chatContext.interactions.length - 1) {\n            //       return {\n            //         ...interaction,\n            //         status: TAnswerStatus.aborted,\n            //       };\n            //     }\n            //     return interaction;\n            //   });\n            //   return;\n            // }\n            chatContext.interactions = normalizedState.map((interaction, index) => {\n              const isLatest = state.length - 1 === index\n              let answerStatus = TAnswerStatus.loading\n              let sources = []\n\n              if (interaction.aborted) {\n                answerStatus = TAnswerStatus.aborted\n              } else if (interaction.loading && interaction.sources) {\n                answerStatus = TAnswerStatus.rendering\n              } else if (interaction.loading && interaction.response) {\n                answerStatus = TAnswerStatus.streaming\n              } else if (!interaction.loading && interaction.response) {\n                answerStatus = TAnswerStatus.done\n              }\n\n              // biome-ignore lint/suspicious/noExplicitAny: Client should expose this type\n              /**\n               * we usually expected to receive interaction.sources as an array, but sometimes it comes as an object.\n               * need to check OSS Orama and fix it if it's a bug.\n               **/\n              if (interaction.sources) {\n                sources = Array.isArray(interaction.sources) ?\n                  (interaction.sources as any)?.map((source) => source.document) :\n                  (interaction.sources.hits as any)?.map((source) => source.document)\n              }\n\n              if (isLatest && answerStatus === TAnswerStatus.done) {\n                callbacks?.onAnswerGeneratedCallback?.({\n                  askParams: askParams,\n                  query: interaction.query,\n                  sources: interaction.sources,\n                  answer: interaction.response,\n                  segment: interaction.segment,\n                  trigger: interaction.trigger,\n                })\n              }\n\n              return {\n                query: interaction.query,\n                interactionId: interaction.interactionId,\n                response: interaction.response,\n                relatedQueries: interaction.relatedQueries,\n                status: answerStatus,\n                latest: isLatest,\n                sources,\n              }\n            })\n          },\n        },\n      })\n\n      if (this.oramaClient.clientType === 'cloud' && systemPrompts) {\n        (this.answerSession as CloudAnswerSession<true>).setSystemPromptConfiguration({ systemPrompts })\n      }\n    }\n\n    // TODO: ABORT/ERROR/STOP should emmit onStateChange event. Keeping the lines below as a reference\n    // TODO: WE may want to reveive ask props as a Service prop instead of enforcing it here\n    return this.answerSession.ask(askParams).catch((error) => {\n      chatContext.interactions = chatContext.interactions.map((interaction, index) => {\n        if (index === chatContext.interactions.length - 1) {\n          return {\n            ...interaction,\n            status: TAnswerStatus.error,\n          }\n        }\n        return interaction\n      })\n      console.error(error)\n    })\n  }\n\n  abortAnswer = () => {\n    if (!this.answerSession) {\n      throw new OramaClientNotInitializedError()\n    }\n\n    this.answerSession.abortAnswer()\n  }\n\n  regenerateLatest = async () => {\n    if (!this.answerSession) {\n      throw new OramaClientNotInitializedError()\n    }\n\n    this.answerSession.regenerateLast({ stream: false })\n  }\n\n  resetChat = async () => {\n    if (!this.answerSession) {\n      throw new OramaClientNotInitializedError()\n    }\n\n    if (chatContext.interactions.length < 1) {\n      return\n    }\n\n    // TODO: SDK should abort any streaming before cleaning the sessions. It is not doing that today\n    if (\n      ['loading', 'rendering', 'streaming'].includes(\n        chatContext.interactions[chatContext.interactions.length - 1].status,\n      )\n    ) {\n      this.answerSession.abortAnswer()\n    }\n\n    this.answerSession.clearSession()\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
